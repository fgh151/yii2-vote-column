<?php


namespace fgh151\vote;

use yii\base\Model;
use yii\data\ActiveDataProvider;
use yii\data\ArrayDataProvider;
use yii\grid\Column;
use kartik\switchinput\SwitchInput;
use yii\helpers\Url;
use yii\bootstrap\Html;

class VoteColumn extends Column
{

    /**
     * Show filter?
     * @var bool
     */
    public $filter = true;

    /**
     * Attribute to store
     * @var bool
     */
    public $attribute;

    /**
     * @var array the HTML attributes for the filter input fields. This property is used in combination with
     * the [[filter]] property. When [[filter]] is not set or is an array, this property will be used to
     * render the HTML attributes for the generated filter input fields.
     * @see \yii\helpers\Html::renderTagAttributes() for details on how attributes are being rendered.
     */
    public $filterInputOptions = [];

    /**
     * @var string label to be displayed in the [[header|header cell]] and also to be used as the sorting
     * link label when sorting is enabled for this column.
     * If it is not set and the models provided by the GridViews data provider are instances
     * of [[\yii\db\ActiveRecord]], the label will be determined using [[\yii\db\ActiveRecord::getAttributeLabel()]].
     * Otherwise [[\yii\helpers\Inflector::camel2words()]] will be used to get a label.
     */
    public $label;

    /**
     * @var bool whether the header label should be HTML-encoded.
     * @see label
     * @since 2.0.1
     */
    public $encodeLabel = true;

    /**
     * @var bool whether to allow sorting by this column. If true and [[attribute]] is found in
     * the sort definition of [[GridView::dataProvider]], then the header cell of this column
     * will contain a link that may trigger the sorting when being clicked.
     */
    public $enableSorting = true;

    /**
     * @var array the HTML attributes for the link tag in the header cell
     * generated by [[\yii\data\Sort::link]] when sorting is enabled for this column.
     * @see \yii\helpers\Html::renderTagAttributes() for details on how attributes are being rendered.
     */
    public $sortLinkOptions = [];

    /**
     * Action which change value.
     * example:
     * <pre>
     * public function actionAjaxVote($id)
     * {
     *      $user = User::findOne($id);
     *      $user->vote = !$user->vote;
     *      $user->save();
     *      Yii::$app->end();
     * }
     * </pre>
     * and $action == 'controller/ajax-vote'
     * @var string
     */
    public $action;

    /**
     * Swithcer labels
     * @var string
     */
    public $onText = 'Одобрен';
    public $offText = 'Не одобрен';

    /**
     * @inheritdoc
     * @throws \Exception
     */
    public function init()
    {
        parent::init();
        $this->content = function ($model, $key, $index, $column) {
            $attribute = $this->attribute;
            return SwitchInput::widget([
                'name' => 'vote',
                'value' => (bool)$model->$attribute,
                'pluginOptions' => [
                    'onText' => $this->onText,
                    'offText' => $this->offText
                ],
                'pluginEvents' => [
                    'switchChange.bootstrapSwitch' => 'function() { $.get( "' . Url::to([$this->action, 'id' => $model->id]) . '") }',
                ]
            ]);
        };

    }

    /**
     * @inheritdoc
     */
    protected function renderFilterCellContent()
    {
        $model = $this->grid->filterModel;

        if ($this->filter !== false && $model instanceof Model && $this->attribute !== null) {
            if ($model->hasErrors($this->attribute)) {
                Html::addCssClass($this->filterOptions, 'has-error');
                $error = ' ' . Html::error($model, $this->attribute, $this->grid->filterErrorOptions);
            } else {
                $error = '';
            }
            $options = array_merge(['prompt' => 'Статус'], $this->filterInputOptions);
            return Html::activeDropDownList($model, $this->attribute, [
                    $this->grid->formatter->booleanFormat[0],
                    $this->grid->formatter->booleanFormat[1],
                ], $options) . $error;
        }
    }

    /**
     * @inheritdoc
     */
    protected function renderHeaderCellContent()
    {
        if ($this->header !== null || $this->label === null && $this->attribute === null) {
            return parent::renderHeaderCellContent();
        }

        $label = $this->getHeaderCellLabel();
        if ($this->encodeLabel) {
            $label = Html::encode($label);
        }

        if ($this->attribute !== null && $this->enableSorting &&
            ($sort = $this->grid->dataProvider->getSort()) !== false && $sort->hasAttribute($this->attribute)
        ) {
            return $sort->link($this->attribute, array_merge($this->sortLinkOptions, ['label' => $label]));
        } else {
            return $label;
        }
    }

    /**
     * @inheritdoc
     * @since 2.0.8
     */
    protected function getHeaderCellLabel()
    {
        $provider = $this->grid->dataProvider;

        if ($this->label === null) {
            if ($provider instanceof ActiveDataProvider && $provider->query instanceof ActiveQueryInterface) {
                /* @var $model Model */
                $model = new $provider->query->modelClass;
                $label = $model->getAttributeLabel($this->attribute);
            } elseif ($provider instanceof ArrayDataProvider && $provider->modelClass !== null) {
                /* @var $model Model */
                $model = new $provider->modelClass;
                $label = $model->getAttributeLabel($this->attribute);
            } elseif ($this->grid->filterModel !== null && $this->grid->filterModel instanceof Model) {
                $label = $this->grid->filterModel->getAttributeLabel($this->attribute);
            } else {
                $models = $provider->getModels();
                if (($model = reset($models)) instanceof Model) {
                    /* @var $model Model */
                    $label = $model->getAttributeLabel($this->attribute);
                } else {
                    $label = Inflector::camel2words($this->attribute);
                }
            }
        } else {
            $label = $this->label;
        }

        return $label;
    }
}